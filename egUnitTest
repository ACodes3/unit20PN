#include <QtTest/QtTest>
#include "IntervalManager.h"
#include "QtRandomGenerator.h"
#include "RandomNumberGenerator.h"

class TestIntervalManager : public QObject {
    Q_OBJECT

private slots:
    void testAddInterval();
    void testSplitInterval();
    void testGetIntervalStartEnd();
    void testIntervalCount();
};

void TestIntervalManager::testAddInterval() {
    IntervalManager im;
    im.addInterval(1, 100);
    QCOMPARE(im.intervalCount(), 2);
}

void TestIntervalManager::testSplitInterval() {
    IntervalManager im;
    im.splitInterval(0, 500000);
    QCOMPARE(im.intervalCount(), 2);
    QCOMPARE(im.getIntervalStart(0), 1);
    QCOMPARE(im.getIntervalEnd(0), 499999);
    QCOMPARE(im.getIntervalStart(1), 500001);
    QCOMPARE(im.getIntervalEnd(1), 1000000);
}

void TestIntervalManager::testGetIntervalStartEnd() {
    IntervalManager im;
    QCOMPARE(im.getIntervalStart(0), 1);
    QCOMPARE(im.getIntervalEnd(0), 1000000);
}

void TestIntervalManager::testIntervalCount() {
    IntervalManager im;
    QCOMPARE(im.intervalCount(), 1);
}

class TestRandomNumberGenerator : public QObject {
    Q_OBJECT

private slots:
    void testRandomNumberSelection();
};

void TestRandomNumberGenerator::testRandomNumberSelection() {
    auto intervalManager = std::make_unique<IntervalManager>();
    auto randomGenerator = std::make_unique<QtRandomGenerator>();
    RandomNumberGenerator rng(std::move(intervalManager), std::move(randomGenerator));

    int number = rng.getRandomNumber();
    QVERIFY(number >= 1 && number <= 1000000);
    QCOMPARE(rng.intervalManager->intervalCount(), 2); 
}

QTEST_MAIN(TestIntervalManager)
QTEST_MAIN(TestRandomNumberGenerator)
#include "test_intervalmanager.moc"
#include "test_randomnumbergenerator.moc"
