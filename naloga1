#include <QCoreApplication>
#include <QVector>
#include <QRandomGenerator>
#include <iostream>

class Interval {
public:
    int start;
    int end;

    Interval(int s, int e) : start(s), end(e) {}
};

class RandomNumberGenerator {
private:
    QVector<Interval> intervals;

public:
    RandomNumberGenerator() {
        intervals.append(Interval(1, 1000000));
    }

    int getRandomNumber() {
        int randomIndex = QRandomGenerator::global()->bounded(intervals.size());
        int randomIntervalStart = intervals[randomIndex].start;
        int randomIntervalEnd = intervals[randomIndex].end;

        int randomNumber = QRandomGenerator::global()->bounded(randomIntervalStart, randomIntervalEnd + 1);

        splitInterval(randomIndex, randomNumber);

        return randomNumber;
    }

private:
    // Razdelitev intervala
    void splitInterval(int index, int randomNumber) {
        int oldStart = intervals[index].start;
        int oldEnd = intervals[index].end;

        if (randomNumber == oldStart && randomNumber == oldEnd) {
            intervals.remove(index);
        } else if (randomNumber == oldStart) {
            intervals[index].start = randomNumber + 1;
        } else if (randomNumber == oldEnd) {
            intervals[index].end = randomNumber - 1;
        } else {
            intervals.insert(index + 1, Interval(randomNumber + 1, oldEnd));
            intervals[index].end = randomNumber - 1;
        }
    }
};

int main(int argc, char *argv[]) {
    QCoreApplication a(argc, argv);

    //za poenostavitev sem dala 1000 namesto 1000000, ker bi predolgo trajalo.
    RandomNumberGenerator rng;
    for (int i = 0; i < 1000; ++i) {
        std::cout << "Naključno število " << i + 1 << ": " << rng.getRandomNumber() << std::endl;
    }

    return a.exec();
}
